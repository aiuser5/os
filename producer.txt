#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define BUFFER_SIZE 5
#define NUM_PRODUCERS 2
#define NUM_CONSUMERS 2

sem_t empty, full;
pthread_mutex_t mutex;
int buffer[BUFFER_SIZE];
int count = 0;

void *producer(void *arg) {
    int producer_id = *(int *)arg;
    int item;

    for (int i = 0; i < 10; i++) {
        item = rand() % 100; // Produce an item

        sem_wait(&empty);
        pthread_mutex_lock(&mutex);

        // Insert the item into the buffer
        buffer[count] = item;
        printf("Producer %d produced: %d\n", producer_id, item);
        count++;

        pthread_mutex_unlock(&mutex);
        sem_post(&full);

        sleep(1);
    }

    pthread_exit(NULL);
}

void *consumer(void *arg) {
    int consumer_id = *(int *)arg;
    int item;

    for (int i = 0; i < 10; i++) {
        sem_wait(&full);
        pthread_mutex_lock(&mutex);

        // Remove an item from the buffer
        item = buffer[count - 1];
        printf("Consumer %d consumed: %d\n", consumer_id, item);
        count--;

        pthread_mutex_unlock(&mutex);
        sem_post(&empty);

        sleep(1);
    }

    pthread_exit(NULL);
}

int main() {
    pthread_t producer_threads[NUM_PRODUCERS], consumer_threads[NUM_CONSUMERS];
    int producer_ids[NUM_PRODUCERS] = {1, 2};
    int consumer_ids[NUM_CONSUMERS] = {1, 2};

    sem_init(&empty, 0, BUFFER_SIZE);
    sem_init(&full, 0, 0);
    pthread_mutex_init(&mutex, NULL);

    for (int i = 0; i < NUM_PRODUCERS; i++) {
        pthread_create(&producer_threads[i], NULL, producer, &producer_ids[i]);
    }

    for (int i = 0; i < NUM_CONSUMERS; i++) {
        pthread_create(&consumer_threads[i], NULL, consumer, &consumer_ids[i]);
    }

    for (int i = 0; i < NUM_PRODUCERS; i++) {
        pthread_join(producer_threads[i], NULL);
    }

    for (int i = 0; i < NUM_CONSUMERS; i++) {
        pthread_join(consumer_threads[i], NULL);
    }

    sem_destroy(&empty);
    sem_destroy(&full);
    pthread_mutex_destroy(&mutex);

    return 0;
}
--------------------------------------------------------------------------------------------------------
#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <unistd.h>

#define BUFFER_SIZE 5
#define NUM_PRODUCERS 2
#define NUM_CONSUMERS 2

pthread_mutex_t mutex;
int buffer[BUFFER_SIZE];
int count = 0;

void *producer(void *arg) {
    int producer_id = *(int *)arg;
    int item;

    for (int i = 0; i < 10; i++) {
        item = rand() % 100; // Produce an item

        pthread_mutex_lock(&mutex);

        // Check if the buffer is full
        while (count == BUFFER_SIZE) {
            pthread_mutex_unlock(&mutex);
            sleep(1);
            pthread_mutex_lock(&mutex);
        }

        // Insert the item into the buffer
        buffer[count] = item;
        printf("Producer %d produced: %d\n", producer_id, item);
        count++;

        pthread_mutex_unlock(&mutex);
        sleep(1);
    }

    pthread_exit(NULL);
}

void *consumer(void *arg) {
    int consumer_id = *(int *)arg;
    int item;

    for (int i = 0; i < 10; i++) {
        pthread_mutex_lock(&mutex);

        // Check if the buffer is empty
        while (count == 0) {
            pthread_mutex_unlock(&mutex);
            sleep(1);
            pthread_mutex_lock(&mutex);
        }

        // Remove an item from the buffer
        item = buffer[count - 1];
        printf("Consumer %d consumed: %d\n", consumer_id, item);
        count--;

        pthread_mutex_unlock(&mutex);
        sleep(1);
    }

    pthread_exit(NULL);
}

int main() {
    pthread_t producer_threads[NUM_PRODUCERS], consumer_threads[NUM_CONSUMERS];
    int producer_ids[NUM_PRODUCERS] = {1, 2};
    int consumer_ids[NUM_CONSUMERS] = {1, 2};

    pthread_mutex_init(&mutex, NULL);

    for (int i = 0; i < NUM_PRODUCERS; i++) {
        pthread_create(&producer_threads[i], NULL, producer, &producer_ids[i]);
    }

    for (int i = 0; i < NUM_CONSUMERS; i++) {
        pthread_create(&consumer_threads[i], NULL, consumer, &consumer_ids[i]);
    }

    for (int i = 0; i < NUM_PRODUCERS; i++) {
        pthread_join(producer_threads[i], NULL);
    }

    for (int i = 0; i < NUM_CONSUMERS; i++) {
        pthread_join(consumer_threads[i], NULL);
    }

    pthread_mutex_destroy(&mutex);

    return 0;
}
